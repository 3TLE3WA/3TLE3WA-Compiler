#include "3tle3wa/backend/scheduler/Enums.hh"
#include "3tle3wa/riscv/asm.hh"

#define GTYPE(t, e) SCHED_TYPE t::GetSchedType() const { return e; }

namespace riscv {

//
// asm with label
//

GTYPE(LA_LB, SCHED_TYPE::IMISC);
GTYPE(LLA_LB, SCHED_TYPE::IMISC);
GTYPE(LLA_LB_OFF, SCHED_TYPE::IMISC);

GTYPE(LW_LB, SCHED_TYPE::LOAD);
GTYPE(LD_LB, SCHED_TYPE::LOAD);
GTYPE(SW_LB, SCHED_TYPE::STORE);
GTYPE(SD_LB, SCHED_TYPE::STORE);
GTYPE(FLW_LB, SCHED_TYPE::LOAD);
GTYPE(FSW_LB, SCHED_TYPE::STORE);

//
// misc int op
//

GTYPE(MV, SCHED_TYPE::IMISC);
GTYPE(LI, SCHED_TYPE::IMISC);
GTYPE(LUI, SCHED_TYPE::IMISC);
GTYPE(SEXT_W, SCHED_TYPE::IMISC);

//
// set flag
//

GTYPE(SEQZ, SCHED_TYPE::IMISC);
GTYPE(SNEZ, SCHED_TYPE::IMISC);
GTYPE(SLTZ, SCHED_TYPE::IMISC);
GTYPE(SGTZ, SCHED_TYPE::IMISC);
GTYPE(SLT, SCHED_TYPE::IMISC);
GTYPE(SLTI, SCHED_TYPE::IMISC);
GTYPE(SLTIU, SCHED_TYPE::IMISC);
GTYPE(SGT, SCHED_TYPE::IMISC);
GTYPE(SLTU, SCHED_TYPE::IMISC);
GTYPE(SGTU, SCHED_TYPE::IMISC);

//
// misc flt op
//

GTYPE(FMV_S, SCHED_TYPE::FMISC);
GTYPE(FABS_S, SCHED_TYPE::FMISC);
GTYPE(FNEG_S, SCHED_TYPE::FMISC);

//
// branch with zero
//

GTYPE(BEQZ, SCHED_TYPE::JMPBR);
GTYPE(BNEZ, SCHED_TYPE::JMPBR);
GTYPE(BLEZ, SCHED_TYPE::JMPBR);
GTYPE(BGEZ, SCHED_TYPE::JMPBR);
GTYPE(BLTZ, SCHED_TYPE::JMPBR);
GTYPE(BGTZ, SCHED_TYPE::JMPBR);

//
// branch 2 op
//

GTYPE(BEQ, SCHED_TYPE::JMPBR);
GTYPE(BNE, SCHED_TYPE::JMPBR);
GTYPE(BLT, SCHED_TYPE::JMPBR);
GTYPE(BGE, SCHED_TYPE::JMPBR);
GTYPE(BGT, SCHED_TYPE::JMPBR);
GTYPE(BLE, SCHED_TYPE::JMPBR);
GTYPE(BLTU, SCHED_TYPE::JMPBR);
GTYPE(BGEU, SCHED_TYPE::JMPBR);
GTYPE(BGTU, SCHED_TYPE::JMPBR);
GTYPE(BLEU, SCHED_TYPE::JMPBR);

//
// j misc
//

GTYPE(J, SCHED_TYPE::JMPBR);
GTYPE(JAL, SCHED_TYPE::JMPBR);
GTYPE(JR, SCHED_TYPE::JMPBR);
GTYPE(JALR, SCHED_TYPE::JMPBR);
GTYPE(RET, SCHED_TYPE::JMPBR);
GTYPE(CALL, SCHED_TYPE::JMPBR);
GTYPE(TAIL, SCHED_TYPE::JMPBR);

//
// RV64I
//

// ls

GTYPE(LW, SCHED_TYPE::LOAD);
GTYPE(LD, SCHED_TYPE::LOAD);
GTYPE(SW, SCHED_TYPE::STORE);
GTYPE(SD, SCHED_TYPE::STORE);

// imm 64

GTYPE(ADDI, SCHED_TYPE::IMISC);
GTYPE(XORI, SCHED_TYPE::IMISC);
GTYPE(ORI, SCHED_TYPE::IMISC);
GTYPE(ANDI, SCHED_TYPE::IMISC);
GTYPE(SLLI, SCHED_TYPE::IMISC);
GTYPE(SRLI, SCHED_TYPE::IMISC);
GTYPE(SRAI, SCHED_TYPE::IMISC);

// op 64

GTYPE(ADD, SCHED_TYPE::IMISC);
GTYPE(SUB, SCHED_TYPE::IMISC);
GTYPE(SLL, SCHED_TYPE::IMISC);
GTYPE(XOR, SCHED_TYPE::IMISC);
GTYPE(SRL, SCHED_TYPE::IMISC);
GTYPE(SRA, SCHED_TYPE::IMISC);
GTYPE(OR, SCHED_TYPE::IMISC);
GTYPE(AND, SCHED_TYPE::IMISC);

// imm 32

GTYPE(ADDIW, SCHED_TYPE::IMISC);
GTYPE(SLLIW, SCHED_TYPE::IMISC);
GTYPE(SRLIW, SCHED_TYPE::IMISC);
GTYPE(SRAIW, SCHED_TYPE::IMISC);

// op 32

GTYPE(ADDW, SCHED_TYPE::IMISC);
GTYPE(SUBW, SCHED_TYPE::IMISC);
GTYPE(SLLW, SCHED_TYPE::IMISC);
GTYPE(SRLW, SCHED_TYPE::IMISC);
GTYPE(SRAW, SCHED_TYPE::IMISC);

//
// RV64M
//

GTYPE(MUL, SCHED_TYPE::IMUL);
GTYPE(DIV, SCHED_TYPE::IDIVREM);
GTYPE(DIVU, SCHED_TYPE::IDIVREM);
GTYPE(REM, SCHED_TYPE::IDIVREM);
GTYPE(REMU, SCHED_TYPE::IDIVREM);
GTYPE(MULW, SCHED_TYPE::IMUL);
GTYPE(DIVW, SCHED_TYPE::IDIVREM);
GTYPE(DIVWU, SCHED_TYPE::IDIVREM);
GTYPE(REMW, SCHED_TYPE::IDIVREM);
GTYPE(REMWU, SCHED_TYPE::IDIVREM);

//
// RV64F
//

GTYPE(FLW, SCHED_TYPE::LOAD);
GTYPE(FSW, SCHED_TYPE::STORE);
GTYPE(FMADD_S, SCHED_TYPE::FMUL);
GTYPE(FMSUB_S, SCHED_TYPE::FMUL);
GTYPE(FNMADD_S, SCHED_TYPE::FMUL);
GTYPE(FNMSUB_S, SCHED_TYPE::FMUL);
GTYPE(FADD_S, SCHED_TYPE::FMISC);
GTYPE(FSUB_S, SCHED_TYPE::FMISC);
GTYPE(FMUL_S, SCHED_TYPE::FMUL);
GTYPE(FDIV_S, SCHED_TYPE::FDIVREM);
GTYPE(FCVT_W_S, SCHED_TYPE::FMISC);
GTYPE(FCVT_S_W, SCHED_TYPE::FMISC);
GTYPE(FEQ, SCHED_TYPE::FMISC);
GTYPE(FLT, SCHED_TYPE::FMISC);
GTYPE(FLE, SCHED_TYPE::FMISC);
GTYPE(FMV_W_X, SCHED_TYPE::FMISC);
GTYPE(FMV_X_W, SCHED_TYPE::FMISC);
GTYPE(FMAX_S, SCHED_TYPE::FMISC);
GTYPE(FMIN_S, SCHED_TYPE::FMISC);

}  // namespace riscv